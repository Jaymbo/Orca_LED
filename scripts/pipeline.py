import os
import glob
import logging
import time
from pathlib import Path
import subprocess
from openbabel import openbabel
from database import Database
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from xbpy.rdutil.io import read_molecules
from rdkit.Chem.rdmolops import GetFormalCharge, GetMolFrags
from rdkit.Chem.rdmolfiles import MolToXYZBlock
from rdkit import Chem
import numpy as np

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class XYZFileHandler:
    def __init__(self, input_xyz: str, file_cache) -> None:
        self.input_xyz: str = input_xyz
        self.file_cache = file_cache
        self.atom_count: int
        self.atom_data: list[str]
        self.atom_count, self.atom_data = self.read_xyz_file()

    def read_xyz_file(self) -> tuple[int, list[str]]:
        lines = self.file_cache.get(self.input_xyz).split("\n")
        atom_count = int(lines[0].strip())
        atom_data = [line.replace("\t", " ") for line in lines[2:2 + atom_count]]
        return atom_count, atom_data

    def write_fragment_xyz(self, fragment_atoms: list[str], output_filename: str) -> None:
        header = f"{len(fragment_atoms)}\nFragment generated by split_xyz\n"
        content = "\n".join(fragment_atoms)
        full_context = header+ "\n" + content
        self.file_cache.set(output_filename, full_context)

    def split_xyz(self, fragments_list: list[list[int]], output_prefix: str, name="fragment") -> None:
        xyz_files = []
        for i, fragment_indices in enumerate(fragments_list):
            fragment_atoms = [self.atom_data[idx] for idx in fragment_indices]
            output_filename = f"{output_prefix}/{name}_{i + 1:03}.xyz"
            self.write_fragment_xyz(fragment_atoms, output_filename)
            xyz_files.append(output_filename)
        return xyz_files


class Mol2FileHandler:
    def __init__(self, input_mol2: str, file_cache) -> None:
        self.input_mol2 = input_mol2
        self.file_cache = file_cache

    def convert_mol2_to_xyz(self, output_xyz: str) -> None:
        ob_conversion = openbabel.OBConversion()
        ob_conversion.SetInAndOutFormats("mol2", "xyz")
        mol = openbabel.OBMol()
        mol2_content = self.file_cache.get(self.input_mol2)
        if not ob_conversion.ReadString(mol, mol2_content):
            logging.error(f"Error reading content from file cache: {self.input_mol2}")
            raise ValueError(f"Error reading content from file cache: {self.input_mol2}")
        xyz_content = ob_conversion.WriteString(mol)
        self.file_cache.set(output_xyz, xyz_content)


class ORCAInputFileCreator:
    def __init__(self, file: str, file_cache, header_in=None) -> None:
        self.file: str = file
        self.file_cache = file_cache
        self.mols: dict[Mol] = {}
        self.header: str = header_in or """! DLPNO-CCSD(T) def2-svp def2-svp/C DEF2/J RIJCOSX veryTIGHTSCF TIGHTPNO LED

%mdci DoDIDplot true end

%maxcore 160000

%mdci
  MaxIter 200
end"""
        self.header += """\n%pal \n  nprocs """
        self.xyz_file: str = self.file.replace(".mol2", ".xyz") if self.file.endswith(".mol2") else self.file
        self.xyz_folder: str = os.path.dirname(self.xyz_file)
        os.makedirs(self.xyz_folder, exist_ok=True)
        self.frag_len: list[int] = []

    def create_inp_file_content(self, charge: int, npros: int, xyz_file: str, fragment_lines: list[str]) -> str:
        inp_content = f"{self.header}{npros}\nend\n*XYZfile {charge} 1 {xyz_file}\n\n"
        inp_content += "".join(fragment_lines)
        return inp_content

    def fragment_cleaning(self, xyz_file: str, fragment_groups: list[list[int]]) -> list[list[int]]:
        """
        sortiert fragmente so das elemente mit doppelten buchstaben in den einstellungen fragmenten ist
        """

        atom_names = []
        lines = self.file_cache.get(xyz_file).split("\n")[2:]
        atom_names = [line.split(' ')[0] for line in lines]

        for i, atom in enumerate(atom_names):
            if len(atom) > 1:
                for j, fragment in enumerate(fragment_groups):
                    for atom in fragment:
                        if atom == i:
                            fragment_groups.insert(0, fragment_groups.pop(j))
                            break
        return fragment_groups
    
    def create_inp_files(self) -> None:
        if self.file.endswith(".mol2"):
            Mol2FileHandler(self.file, self.file_cache).convert_mol2_to_xyz(self.xyz_file)
        else:
            self.file_cache.set(self.xyz_file, self.file_cache.get(self.file))
            with open(self.xyz_file, "w") as f:
                f.write(self.file_cache.get(self.file))
        self.mols[self.xyz_file] = Mol(self.xyz_file, self.mols)
        self.fragments = self.mols[self.xyz_file].get_fragments()
        fragment_lines, xyz_files = self.handle_fragments()
        xyz_files = [self.xyz_file] + xyz_files
        if not xyz_files:
            return
        for i, xyz_file_i in enumerate(xyz_files):
            mol = self.mols[xyz_file_i]
            self.create_single_inp_file(mol, xyz_file_i, Path(xyz_file_i).parent, self.frag_len[i], fragment_lines[i])
            path = Database.process_candidate(Path(xyz_file_i.split(".")[0]), self.file_cache)
            if path:
                self.create_single_inp_file(mol, path, Path(path).parents[1], self.frag_len[i], fragment_lines[i])
                sh_path = ShellScriptCreator(path, self.frag_len[i], self.file_cache).single_sh_script_erstellen()
                # subprocess.run(["sbatch", sh_path])

    def handle_fragments(self) -> list[str]:
        subsys_groups = self.parse_fragments(self.fragments)
        self.calculate_frag_len(subsys_groups)
        for fragment_groups in subsys_groups:
            fragment_groups = self.fragment_cleaning(self.xyz_file, fragment_groups)

            xyz_handler = XYZFileHandler(self.xyz_file, self.file_cache)
        frag_list = []
        for groups in subsys_groups[:-1]:
            group_list = []
            for group in groups:
                group_list.extend(group)
            frag_list.append(group_list)
        xyz_handler.split_xyz(subsys_groups[-1], self.xyz_folder)
        xyz_files = xyz_handler.split_xyz(frag_list, self.xyz_folder, name="subsys")


        fragment_lines = [self.create_fragment_lines(groups) for groups in subsys_groups]
        return fragment_lines, xyz_files

    def parse_fragments(self, fragments: str) -> list[list]:
        subsys_groups = []
        supersys = []
        for subsys in fragments.split("#"):
            fragment_groups = []
            for fragment in subsys.split(","):
                fragment_indices = []
                for part in fragment.split():
                    if "-" in part:
                        start, end = map(int, part.split("-"))
                        fragment_indices.extend(range(start-1, end))
                    else:
                        fragment_indices.append(int(part)-1)
                fragment_groups.append(fragment_indices)
            if fragment_groups:
                subsys_groups.append(fragment_groups)
                supersys.extend(fragment_groups)
        subsys_groups.append(supersys)
        return subsys_groups

    def create_fragment_lines(self, fragment_groups: list[list[int]]) -> list[str]:
        fragment_lines = ["%geom\n Fragments\n"]
        all = []
        for group in fragment_groups:
            all.extend(group)
        all_sorted = sorted(all)
        index_mapping = {old_index: new_index for new_index, old_index in enumerate(all_sorted)}
        for i, group in enumerate(fragment_groups, start=1):
            group = [index_mapping[old_index] for old_index in group]
            fragment_atoms = " ".join(map(str, group))
            fragment_lines.append(f"  {i} {{{fragment_atoms}}} end\n")
        fragment_lines.append(" end\nend\n")
        return fragment_lines

    def create_single_inp_file(self, mol, xyz_file_i: str, base: Path, frag_len: int, fragment_line: str) -> Path:
        charge = mol.get_charge()
        inp_content = self.create_inp_file_content(charge, frag_len, xyz_file_i, fragment_line)
        base_name = os.path.splitext(os.path.basename(xyz_file_i))[0]
        base_path = base / base_name
        inp_path = base_path / f"{base_name}.inp"
        os.makedirs(base_path, exist_ok=True)
        self.file_cache.set(inp_path, inp_content)
        return inp_path

    def calculate_frag_len(self, subsys_groups: list[list]) -> None:
        for fragments_group in subsys_groups:
            self.frag_len.append(min(sum(len(group) for group in fragments_group), 48))

class ShellScriptCreator:
    def __init__(self, path: str, nprocs: int, file_cache: dict) -> None:
        self.path = path.split(".")[0]
        self.mem = 50 * nprocs
        self.nprocs = nprocs
        self.time = "20:00:00"	
        self.name = Path(path).stem
        self.base = Path(path).parents[1]
        self.file_cache = file_cache

    def create_sh_script_content(self) -> str:
        script_content = f"""#!/bin/bash
#SBATCH --nodes=1
#SBATCH --mem={self.mem}gb
#SBATCH --ntasks-per-node={self.nprocs}
#SBATCH --time={self.time}
#SBATCH --output={self.path}_out.out
#SBATCH --error={self.path}_err.err

name={self.name}

workspace_directory={self.base}
orca=/opt/bwhpc/common/chem/orca/6.0.1_shared_openmpi-4.1.6_avx2/orca

echo $name
module load chem/orca/6.0.1
module load mpi/openmpi/4.1
module list

echo "ausfÃ¼hren"
$orca $workspace_directory/$name/$name.inp > $workspace_directory/$name/$name.out
"""
        return script_content

    def single_sh_script_erstellen(self) -> Path:
        total_path = self.path + ".sh"
        script_content = self.create_sh_script_content()
        self.file_cache.set(total_path, script_content)
        return total_path

class Mol:
    def __init__(self, filename: str, mols: dict = {}):
        self.mols: dict = mols
        self.filename: str = filename
        self.mols[self.filename] = self
        self.mol = None
        self.charge: int = None
        self.fragments: str = None
        if filename in self.mols:
            return

    def read_mol(self):
        mol = read_molecules(self.filename)
        self.mol = next(mol)

    def get_charge(self) -> int:
        if self.mol is None:
            self.read_mol()
        self.charge = GetFormalCharge(self.mol)
        return self.charge
    
    def get_fragments(self) -> str:
        if self.fragments is not None:
            return self.fragments
        if self.mol is None:
            self.read_mol()
        mol_block = MolToXYZBlock(self.mol).strip().split('\n')[2:]
        coords = np.mean([np.array(atom.split()[1:], dtype=float) for atom in mol_block], axis=0)
        distances = [np.linalg.norm(np.array(atom.split()[1:], dtype=float) - coords) for atom in mol_block]
        closest_atom = np.argmin(distances) + 1

        frags = [list(frag) for frag in GetMolFrags(self.mol, sanitizeFrags=False, asMols=False)]
        mols = [mol for mol in GetMolFrags(self.mol, sanitizeFrags=False, asMols=True)]
        closest_frag_index = next(i for i, frag in enumerate(frags) if closest_atom in frag)
        frags.insert(0, frags.pop(closest_frag_index))
        mols.insert(0, mols.pop(closest_frag_index))

        ligand_mol = mols[0]
        combined_mol = mols[1]
        for mol in mols[2:]:
            combined_mol = Chem.CombineMols(combined_mol, mol)
        
        ligand_path = Path(self.filename).parent / "subsys_001.xyz"
        self.mols[str(ligand_path)] = Mol(ligand_path, self.mols)
        self.mols[str(ligand_path)].mol = ligand_mol

        combined_path = Path(self.filename).parent / "subsys_002.xyz"
        self.mols[str(combined_path)] = Mol(combined_path, self.mols)
        self.mols[str(combined_path)].mol = combined_mol

        frag_str = ",".join(" ".join(str(atom + 1) for atom in frag) for frag in frags)
        frag_str = frag_str.replace(",", "#", 1)
        self.fragments = frag_str
        return self.fragments
