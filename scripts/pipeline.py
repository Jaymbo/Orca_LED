import os
import glob
import logging
import time
from pathlib import Path
import subprocess
from openbabel import openbabel
from database import Database
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from XBPy.module.xbpy.rdutil.io import read_molecules
from rdkit.Chem.rdmolops import GetFormalCharge, GetMolFrags
from rdkit.Chem.rdmolfiles import MolToXYZBlock
import numpy as np


# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def track_time(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        elapsed_time = end_time - start_time
        logging.info(f"Function '{func.__name__}' took {elapsed_time:.4f} seconds to complete.")
        return result
    return wrapper

class XYZFileHandler:
    def __init__(self, input_xyz):
        self.input_xyz = input_xyz
        self.atom_count, self.atom_data = self.read_xyz_file()
        logging.info(f"Initialized XYZFileHandler with file: {input_xyz}")

    @track_time
    def read_xyz_file(self):
        logging.info(f"Reading XYZ file: {self.input_xyz}")
        with open(self.input_xyz, "r") as xyz_file:
            lines = xyz_file.readlines()
        atom_count = int(lines[0].strip())
        atom_data = [line.replace("\t", " ") for line in lines[2:2 + atom_count]]
        return atom_count, atom_data

    @track_time
    def write_fragment_xyz(self, fragment_atoms, output_filename):
        logging.info(f"Writing fragment XYZ file: {output_filename}")
        header = f"{len(fragment_atoms)}\nFragment generated by split_xyz\n"
        with open(output_filename, 'w') as output_file:
            output_file.write(header)
            output_file.writelines(fragment_atoms)

    @track_time
    def split_xyz(self, fragments_list, output_prefix, name="fragment"):
        logging.info(f"Splitting XYZ file into fragments with prefix: {output_prefix}")
        for i, fragment_indices in enumerate(fragments_list):
            fragment_atoms = [self.atom_data[idx] for idx in fragment_indices]
            output_filename = f"{output_prefix}/{name}_{i + 1:03}.xyz"
            self.write_fragment_xyz(fragment_atoms, output_filename)


class Mol2FileHandler:
    def __init__(self, input_mol2):
        self.input_mol2 = input_mol2
        logging.info(f"Initialized Mol2FileHandler with file: {input_mol2}")

    @track_time
    def convert_mol2_to_xyz(self, output_xyz):
        logging.info(f"Converting MOL2 file to XYZ: {self.input_mol2} -> {output_xyz}")
        ob_conversion = openbabel.OBConversion()
        ob_conversion.SetInAndOutFormats("mol2", "xyz")
        mol = openbabel.OBMol()
        if not ob_conversion.ReadFile(mol, self.input_mol2):
            logging.error(f"Error reading file: {self.input_mol2}")
            raise ValueError(f"Error reading file: {self.input_mol2}")
        if not ob_conversion.WriteFile(mol, output_xyz):
            logging.error(f"Error writing file: {output_xyz}")
            raise ValueError(f"Error writing file: {output_xyz}")


class ORCAInputFileCreator:
    def __init__(self, file, header_in=None):
        self.file = file
        self.header = header_in or """! DLPNO-CCSD(T) def2-svp def2-svp/C DEF2/J RIJCOSX veryTIGHTSCF TIGHTPNO LED

%mdci DoDIDplot true end

%maxcore 160000

%mdci
  MaxIter 200
end"""
        self.header += """\n%pal \n  nprocs """
        self.xyz_file = self.file.replace(".mol2", ".xyz") if self.file.endswith(".mol2") else self.file
        self.xyz_folder = os.path.dirname(self.xyz_file)
        os.makedirs(self.xyz_folder, exist_ok=True)
        self.frag_len = []
        logging.info(f"Initialized ORCAInputFileCreator with file: {file}")

    def create_inp_file_content(self, charge, npros, xyz_file, fragment_lines):
        inp_content = f"{self.header}{npros}\nend\n*XYZfile {charge} 1 {xyz_file}\n\n"
        inp_content += "".join(fragment_lines)
        return inp_content

    def fragment_cleaning(self, xyz_file, fragment_groups):
        """
        sortiert fragmente so das elemente mit doppelten buchstaben in den einstellungen fragmenten ist
        """
        if len(fragment_groups) < 10:
            return

        atom_names = []
        with open(xyz_file, "r") as file:
            lines = file.readlines()[2:]
            atom_names = [line.split()[0] for line in lines]

        for i, atom in enumerate(atom_names):
            if len(atom) > 1:
                for j, fragment in enumerate(fragment_groups):
                    for atom in fragment:
                        if atom == i:
                            fragment_groups.insert(0, fragment_groups.pop(j))
                            break
        return fragment_groups
    
    @track_time
    def create_inp_files(self):
        logging.info("Creating ORCA input files")
        if self.file.endswith(".mol2"):
            Mol2FileHandler(self.file).convert_mol2_to_xyz(self.xyz_file)
            logging.info(f"Converted MOL2 file to XYZ: {self.file} -> {self.xyz_file}")
            
        self.fragments = FragmentExtractor.extract_fragments(self.file)
        logging.info(f"fragments: {self.fragments}")

        fragment_lines = self.handle_fragments() if self.fragments != "-1" else None

        xyz_files = sorted(glob.glob(os.path.join(self.xyz_folder, "*.xyz")))
        # alle die mit subsys anfangen sortieren alle andetren aussortieren
        xyz_files = [file for file in xyz_files if "subsys_" in file]
        xyz_files.append(self.xyz_file)
        if not xyz_files:
            logging.warning("No .xyz files found in the specified folder.")
            return
        for i, xyz_file_i in enumerate(xyz_files):
            self.create_single_inp_file(xyz_file_i, Path(xyz_file_i).parent, self.frag_len[i], fragment_lines[i])
            path = Database.process_candidate(Path(xyz_file_i.split(".")[0]))
            if path:
                self.create_single_inp_file(path, Path(path).parents[1], self.frag_len[i], fragment_lines[i])
                sh_path = ShellScriptCreator.single_sh_script_erstellen(path, Path(path).parents[1], i, self.frag_len[i])
                subprocess.run(["sbatch", sh_path])

    @track_time
    def handle_fragments(self):
        logging.info("Handling fragments")
        subsys_groups = self.parse_fragments(self.fragments)
        self.calculate_frag_len(subsys_groups)
        for fragment_groups in subsys_groups:
            fragment_groups = self.fragment_cleaning(self.xyz_file, fragment_groups)

            xyz_handler = XYZFileHandler(self.xyz_file)
        frag_list = []
        for groups in subsys_groups[:-1]:
            group_list = []
            for group in groups:
                group_list.extend(group)
            frag_list.append(group_list)
        xyz_handler.split_xyz(subsys_groups[-1], self.xyz_folder)
        xyz_handler.split_xyz(frag_list, self.xyz_folder, name="subsys")


        fragment_lines = [self.create_fragment_lines(groups) for groups in subsys_groups]
        return fragment_lines

    @track_time
    def parse_fragments(self, fragments):
        logging.info("Parsing fragments")
        subsys_groups = []
        supersys = []
        for subsys in fragments.split("#"):
            fragment_groups = []
            for fragment in subsys.split(","):
                fragment_indices = []
                for part in fragment.split():
                    if "-" in part:
                        start, end = map(int, part.split("-"))
                        fragment_indices.extend(range(start-1, end))
                    else:
                        fragment_indices.append(int(part)-1)
                fragment_groups.append(fragment_indices)
            if fragment_groups:
                subsys_groups.append(fragment_groups)
                supersys.extend(fragment_groups)
        subsys_groups.append(supersys)
        return subsys_groups

    @track_time
    def create_fragment_lines(self, fragment_groups):
        logging.info("Creating fragment lines")
        fragment_lines = ["%geom\n Fragments\n"]
        all = []
        for group in fragment_groups:
            all.extend(group)
        all_sorted = sorted(all)
        index_mapping = {old_index: new_index for new_index, old_index in enumerate(all_sorted)}
        for i, group in enumerate(fragment_groups, start=1):
            group = [index_mapping[old_index] for old_index in group]
            fragment_atoms = " ".join(map(str, group))
            fragment_lines.append(f"  {i} {{{fragment_atoms}}} end\n")
        fragment_lines.append(" end\nend\n")
        return fragment_lines

    @track_time
    def create_single_inp_file(self, xyz_file_i, base, frag_len, fragment_line):
        logging.info(f"Creating single ORCA input file for: {xyz_file_i}")
        charge = ChargeCalculator.calculate_charge(self.file if os.path.basename(self.xyz_file).split(".")[0] == os.path.basename(xyz_file_i).split(".")[0] else xyz_file_i)
        inp_content = self.create_inp_file_content(charge, frag_len, xyz_file_i, fragment_line)
        base_name = os.path.splitext(os.path.basename(xyz_file_i))[0]
        base_path = base / base_name
        inp_path = base_path / f"{base_name}.inp"
        os.makedirs(base_path, exist_ok=True)
        
        with open(inp_path, 'w') as inp_file:
            inp_file.write(inp_content)
        
        return inp_path

    @track_time
    def calculate_frag_len(self, subsys_groups):
        logging.info("Calculating fragment lengths")
        for fragments_group in subsys_groups:
            self.frag_len.append(min(sum(len(group) for group in fragments_group), 48))

class ShellScriptCreator:
    def __init__(self, mem, nprocs, time, path, name, base):
        self.mem = mem
        self.nprocs = nprocs
        self.time = time
        self.path = path.split(".")[0]
        self.name = name
        self.base = base
        logging.info(f"Initialized ShellScriptCreator for: {name}")

    @track_time
    def create_sh_script_content(self):
        logging.info("Creating shell script content")
        script_content = f"""#!/bin/bash
#SBATCH --nodes=1
#SBATCH --mem={self.mem}gb
#SBATCH --ntasks-per-node={self.nprocs}
#SBATCH --time={self.time}
#SBATCH --output={self.path}_out.out
#SBATCH --error={self.path}_err.err

name={self.name}

workspace_directory={self.base}
orca=/opt/bwhpc/common/chem/orca/6.0.1_shared_openmpi-4.1.6_avx2/orca

echo $name
module load chem/orca/6.0.1
module load mpi/openmpi/4.1
module list

echo "ausführen"
$orca $workspace_directory/$name/$name.inp > $workspace_directory/$name/$name.out
"""
        return script_content

    @staticmethod
    def single_sh_script_erstellen(path, base, i, frag_len, time="20:00:00", mem=720):
        name = Path(path).stem
        total_path = base / f"{name}/{name}.sh"
        script_content = ShellScriptCreator(
            int(mem * frag_len / 48), frag_len, time, path, name, base
        ).create_sh_script_content()
        with open(total_path, "w") as file:
            file.write(script_content)
        return total_path


class ChargeCalculator:
    @staticmethod
    def calculate_charge(filename):
        mol = read_molecules(filename)
        mol = next(mol)
        charge = GetFormalCharge(mol)
        return charge
    
class FragmentExtractor:
    @staticmethod
    @track_time
    def extract_fragments(filename):
        mol = read_molecules(filename)
        mol = next(mol)
        mol_block = MolToXYZBlock(mol).strip().split('\n')[2:]
        coords = np.zeros(3)
        distances = []
        for atom in mol_block:
            atom_coords = np.array(atom.split()[1:], dtype=float)
            distances.append(atom_coords)
            coords += atom_coords
        coords /= len(mol_block)
        distances = [np.linalg.norm(distance - coords) for distance in distances]
        closest_atom = np.argmin(distances) + 1

        frags = GetMolFrags(mol, sanitizeFrags=False, asMols=False)
        #touple in touple zu liste in liste machen
        frags = [list(frag) for frag in frags]
        for i, frag in enumerate(frags):
            if closest_atom in frag:
                frags.insert(0, frags.pop(i))
                break
        frags = [[int(atom) + 1 for atom in frag] for frag in frags]
        frag_str = ""
        for i, frag in enumerate(frags):
            for j, atom in enumerate(frag):
                frag_str += " " + str(atom)
            frag_str += ","
        frag_str = frag_str[:-1]
        # erstes , durch # ersetzen
        frag_str = frag_str.replace(',', '#', 1)  # Fixed the variable name from frags to frag_str
        return frag_str
